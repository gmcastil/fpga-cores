#!/bin/bash

# Sets up configuration files for a freshly created user account

# Source some common functions and make sure that commonly used tools are
# present somewhere on the system and can be executed by the current user
if [[ -f common.sh ]]; then
  source common.sh
fi

case "$("${UNAME}" -s)" in
  'Linux'*)  PLATFORM=Linux;;
  'Darwin'*) PLATFORM=Darwin;;
  *)         PLATFORM=;;
esac

if [[ "${PLATFORM}" == "" ]]; then
  err "Mac OS or Linux are the only supported platforms"
fi

# Refuse to continue if any of the files of interest exist
# Create symlinks for .profile, .bash_profile, .bashrc, and any others that need
# to be made

SHELL_FILES=("profile" "bash_profile" "bashrc" "aliases")
OTHER_FILES=("prompt" "dircolors")

# Check to see if an existing configuration already exist
function check_existing_config () {
  local files_to_check
  files_to_check=("${@}")
  for f in "${files_to_check[@]}"; do
    if [[ -f "${HOME}/.${f}" ]]; then
      err "${HOME}/.${f} already exists. Remove or rename it."
    fi
  done
}

function link_shell_config () {
  local files_to_link
  files_to_link=("${@}")
  for f in "${files_to_link[@]}"; do
    if [[ "${PLATFORM}" == "Darwin" ]]; then
      "${LN}" -v -s "${PWD}/shell/${f}" "${HOME}/.${f}"
    elif [[ "${PLATFORM}" == "Linux" ]]; then
      "${LN}" -v -s -r "shell/${f}" "${HOME}/.${f}"
    fi
  done
}

function link_other_config () {
  local files_to_link
  files_to_link=("${@}")
  for f in "${files_to_link[@]}"; do
    if [[ "${PLATFORM}" == "Darwin" ]]; then
      "${LN}" -v -s "${PWD}/other/${f}" "${HOME}/.${f}"
    elif [[ "${PLATFORM}" == "Linux" ]]; then
      "${LN}" -v -s -r "other/${f}" "${HOME}/.${f}"
    fi
  done
}

check_existing_config "${SHELL_FILES[@]}"
check_existing_config "${OTHER_FILES[@]}"

link_shell_config "${SHELL_FILES[@]}"
link_other_config "${OTHER_FILES[@]}"

